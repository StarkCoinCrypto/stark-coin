%lang starknet
from starkware.cairo.common.cairo_builtins import HashBuiltin
from starkware.cairo.common.uint256 import Uint256, uint256_add, uint256_sub, uint256_le
from starkware.cairo.common.alloc import alloc

@storage_var
func total_supply() -> (res: Uint256):
end

@storage_var
func balance_of(account: felt) -> (res: Uint256):
end

@storage_var
func allowance(owner: felt, spender: felt) -> (res: Uint256):
end

@external
func name() -> (res: felt):
    return ('Stark Coin')  # Use felt string representation
end

@external
func symbol() -> (res: felt):
    return ('$STARK')
end

@external
func decimals() -> (res: felt):
    return (18)
end

@external
func totalSupply() -> (res: Uint256):
    let (supply) = total_supply.read()
    return (supply)
end

@external
func balanceOf(account: felt) -> (res: Uint256):
    let (balance) = balance_of.read(account)
    return (balance)
end

@external
func transfer(recipient: felt, amount: Uint256) -> (success: felt):
    let (sender) = get_caller_address()
    let (sender_balance) = balance_of.read(sender)
    assert uint256_le(amount, sender_balance) == 1

    let (new_sender_balance) = uint256_sub(sender_balance, amount)
    balance_of.write(sender, new_sender_balance)

    let (recipient_balance) = balance_of.read(recipient)
    let (new_recipient_balance) = uint256_add(recipient_balance, amount)
    balance_of.write(recipient, new_recipient_balance)

    return (1)
end

@external
func approve(spender: felt, amount: Uint256) -> (success: felt):
    let (owner) = get_caller_address()
    allowance.write((owner, spender), amount)
    return (1)
end

@external
func transferFrom(owner: felt, recipient: felt, amount: Uint256) -> (success: felt):
    let (spender) = get_caller_address()

    let (current_allowance) = allowance.read((owner, spender))
    assert uint256_le(amount, current_allowance) == 1

    let (new_allowance) = uint256_sub(current_allowance, amount)
    allowance.write((owner, spender), new_allowance)

    let (owner_balance) = balance_of.read(owner)
    assert uint256_le(amount, owner_balance) == 1

    let (new_owner_balance) = uint256_sub(owner_balance, amount)
    balance_of.write(owner, new_owner_balance)

    let (recipient_balance) = balance_of.read(recipient)
    let (new_recipient_balance) = uint256_add(recipient_balance, amount)
    balance_of.write(recipient, new_recipient_balance)

    return (1)
end

# Mint function for test (not secure for production)
@external
func mint(to: felt, amount: Uint256):
    let (caller) = get_caller_address()
    # In real deployment, check that caller is the owner
    let (current_balance) = balance_of.read(to)
    let (new_balance) = uint256_add(current_balance, amount)
    balance_of.write(to, new_balance)

    let (current_supply) = total_supply.read()
    let (new_supply) = uint256_add(current_supply, amount)
    total_supply.write(new_supply)
    return ()
end
